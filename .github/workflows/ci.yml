name: Pruebas Unitarias

on:
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Ejecutar Pruebas
    runs-on: ubuntu-latest
    
    steps:
    - name: Obtener c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Ejecutar pruebas unitarias
      run: |
        echo "üß™ Ejecutando pruebas unitarias..."
        python -m unittest test_statistics_lib -v
        
    - name: Verificar funciones espec√≠ficas
      run: |
        echo "üîç Verificando funciones espec√≠ficas..."
        python -c "
        import statistics_lib
        import sys
        
        funciones = ['media', 'mediana', 'moda', 'varianza', 'ds']
        errores = []
        
        for func in funciones:
            try:
                # Probar cada funci√≥n con datos de prueba
                if func == 'media':
                    resultado = statistics_lib.media([1, 2, 3, 4, 5])
                    assert resultado == 3.0, f'Media incorrecta: {resultado}'
                elif func == 'mediana':
                    resultado = statistics_lib.mediana([1, 2, 3, 4, 5])
                    assert resultado == 3, f'Mediana incorrecta: {resultado}'
                elif func == 'moda':
                    resultado = statistics_lib.moda([1, 2, 2, 3, 3, 3])
                    assert resultado == 3, f'Moda incorrecta: {resultado}'
                elif func == 'varianza':
                    resultado = statistics_lib.varianza([1, 2, 3, 4, 5])
                    assert abs(resultado - 2.0) < 0.001, f'Varianza incorrecta: {resultado}'
                elif func == 'ds':
                    resultado = statistics_lib.ds([1, 2, 3, 4, 5])
                    assert abs(resultado - 1.4142) < 0.001, f'Desviaci√≥n est√°ndar incorrecta: {resultado}'
                
                print(f'‚úÖ {func}: OK')
            except Exception as e:
                print(f'‚ùå {func}: ERROR - {str(e)}')
                errores.append(func)
        
        if errores:
            print(f'\\nüö® FUNCIONES CON ERRORES: {', '.join(errores)}')
            sys.exit(1)
        else:
            print('\\nüéâ Todas las funciones funcionan correctamente!')
        "
        
    - name: Resumen de verificaci√≥n
      if: always()
      run: |
        echo "=========================================="
        echo "    RESUMEN DE VERIFICACI√ìN"
        echo "=========================================="
        echo "üìä Librer√≠a: statistics-ci"
        echo "üêç Python: 3.11"
        echo "üîÑ Evento: ${{ github.event_name }}"
        echo "üåø Rama: ${{ github.ref_name }}"
        echo "üë§ Autor: ${{ github.actor }}"
        echo "üìÖ Fecha: $(date)"
        echo "=========================================="
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Estado: TODAS LAS PRUEBAS PASARON"
          echo "üéâ El c√≥digo est√° listo para merge"
        else
          echo "‚ùå Estado: ALGUNAS PRUEBAS FALLARON"
          echo "üîß Revisa los errores antes de hacer merge"
        fi
        echo "=========================================="
